// Online Java Compiler
// Use this editor to write, compile and run your Java code online

        10
       /  \
     20    30
    /  \     \
  40    50    60
        / \
      70   80




import java.util.*;
class HelloWorld {
  
  static class Node{
      int data;
      Node left;
      Node right;
      
      Node(int d){
          data = d;
          right =null;
          left = null;
      }
  }
  
  public static void main(String args[])
  { 
      Node root = new Node(10);
      root.left = new Node(20);
      root.right = new Node(30);
      root.left.left = new Node(40);
      root.left.right = new Node(50);
      root.left.right.left = new Node(70);
      root.left.right.right = new Node(80);
      root.right.right = new Node(60);
      
      int k=2;
      kdistancenodes(root,k);
   
   }
   
    // Qustion says I need to print all the nodes which are K distance away from the root node
    
   // Faith and Expectation game khelna hoga
  // Expectation: small left and right sub tree know to do this
  // Faith: run the recursive call from the(K-1)
  // EF: while going downwards, when k becomes 0, print the data
   
   
   // IMPRESSION JAMAO : So edge case which i can ask the interviewer is 
//   if k is greater than the height of the tree, then do i need to return the leaf node( don't tell leaf node) tell do i need ot return last level nodes ?
//  I got one idea to dandle this is by 
// fisrt find the height of the tree
// if  k is greater than to height, then u need to find the nodes for the k=h; h:height 
   
   public static void kdistancenodes(Node node, int k)
   {
      if(node==null)
      {
          return;
      }
      
      if(k==0)
      {
          System.out.print(node.data+",");
          return;
      }
     kdistancenodes(node.left, k-1);
     kdistancenodes(node.right, k-1);
      
   
   }
   
   
  
  }



--------------------



java -cp /tmp/IIcIc7XSZD/HelloWorld
40,50,60,
=== Code Execution Successful ===












---------------------------------Revision----------------------------

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class HelloWorld {
    
    static class Node{
        int data;
        Node left;
        Node right;
        
        Node(int d){
            data =d;
        }
    }
    
    public static void main(String[] str)
    {
      Node root = new Node(10);  // creating object
      root.left = new Node(20);
      root.right = new Node(30);
      root.left.left = new Node(40);
      root.left.right = new Node(50);
      root.left.right.left = new Node(70);
      root.left.right.right = new Node(80);
      root.right.right = new Node(60);
      
      int k =3;
      
      printKNodes(root,k);
    }
    
    public static void printKNodes(Node root, int k)
    {
        // think which DFS: pre-order (root,left,right)
        //why ? because in this fashion I can print left right nodes consicutively.
        
        if(root == null)
        {
            return;
        }
        
        if(k==0){
            System.out.print(root.data +",");
        }
        
        printKNodes(root.left, k-1);
        printKNodes(root.right,k-1);
    }
    
}



---------java -cp /tmp/x6koexaBlO/HelloWorld
70,80,
=== Code Execution Successful ===










----------------------------------------print from right to left   O/P:60,50,40----------------------------------





// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class rampur
{
    static class Node
    {
        int val;
        Node left;
        Node right;
        
        Node(int d)
        {
            val=d;
        }
    }
    
    
    public static void main(String[] args)
    {
       Node root = new Node(10);
      root.left = new Node(20);
      root.right = new Node(30);
      root.left.left = new Node(40);
      root.left.right = new Node(50);
      root.left.right.left = new Node(70);
      root.left.right.right = new Node(80);
      root.right.right = new Node(60);
      
      
      int k=2;
      kdistancenodes(root,k);
    }
    
    
    public static void kdistancenodes(Node root, int k)
    {
        //root left right 
        if(root == null)
        {
            return;
        }
        if(k==0)
        {
            System.out.print(root.val+",");
        }
        kdistancenodes(root.right,k-1);
        kdistancenodes(root.left,k-1);
        
    }
}




