// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.*;
class HelloWorld {
  
  static class Node{
      int data;
      Node left;
      Node right;
      
      Node(int d){
          data = d;
          right =null;
          left = null;
      }
  }
  
  public static void main(String args[])
  { 
      Node root = new Node(10);
      root.left = new Node(20);
      root.right = new Node(30);
      root.left.left = new Node(40);
      root.left.right = new Node(50);
      root.left.right.left = new Node(70);
      root.left.right.right = new Node(80);
      root.right.right = new Node(60);
      
     //Inorder:  left Root right
     inorder(root);
     //Preorder: Root left right
     System.out.print("\n");
     preorder(root);
     // Postorder : Let right root
     System.out.print("\n");
     postorder(root);
    System.out.print("\n");
   }
     
    public static void inorder(Node node)
    {
     if(node==null)
     {
         return;
     }
        
        inorder(node.left);
        System.out.print(node.data+" ");
        inorder(node.right);
    }
     
     
     
     
      public static void preorder(Node node)
    {
     if(node==null)
     {
         return;
     }
        System.out.print(node.data+" ");
        preorder(node.left);
        preorder(node.right);
    }
    
    
     
      public static void postorder(Node node)
    {
     if(node==null)
     {
         return;
     }
        postorder(node.left);
        postorder(node.right);
        System.out.print(node.data+" ");
    }
  
  
  }


--------------------------


java -cp /tmp/4wePkhsmke/HelloWorld
40 20 70 50 80 10 30 60 
10 20 40 50 70 80 30 60 
40 70 80 50 20 60 30 10 

=== Code Execution Successful ===

















------------------------------------Revision---------------------------------14-10-2024----------


// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class TreeRevision {
    
     static class Node
      {
          int key;
          Node left;
          Node right;
          
          Node(int k)
          {
              key = k;
          }
      }
    
    public static void main(String[] args)
    {
      Node root = new Node(10);
      root.left = new Node(20);
      root.right = new Node(30);
      root.left.left = new Node(40);
      root.left.right = new Node(50);
      root.left.right.left = new Node(70);
      root.left.right.right = new Node(80);
      root.right.right = new Node(60);
      
      InorderTraversal(root);      // left, root, right
    //  preorderTraversal(root);     // root, left, right
    //  PostorderTraversal(root);    // left, right, root
        
    }
    
    public static void InorderTraversal(Node root)
    {
        if(root == null)
        {
            return;
        }
        InorderTraversal(root.left);
        System.out.print(root.key+",");
        InorderTraversal(root.right);
    }
}